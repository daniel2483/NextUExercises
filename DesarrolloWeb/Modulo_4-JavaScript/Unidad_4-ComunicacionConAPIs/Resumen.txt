Unidad 4: HTML APIs, JSON
¡Aquí comienza la Unidad 4: HTML APIs, JSON!

    Los objetivos del Programa que corresponden a esta Unidad son:
        Aplicar interactividad a un sitio web a partir de JavaScript.
        Utilizar frameworks y librerías de JavaScript apropiadamente.
        Utilizar las estructuras de programación necesarias para gestionar sitios web dinámicos.

    Los objetivos del Curso 4 que corresponden a esta Unidad son:
        Entender qué es javascript y cómo funciona.
        Aprender a usar el formato JSON y las API's de HTML5 para agregar mayor interactividad a un sitio web.

Leccion 1 - Que es JSON
	- Definicion: estrutura de datos
		grandes cantidades de datos: Javascript Object Notation - Formato Standard en ECMAScript 3
		Como una estrutura valor_key y value entre {} o una lista ordenada entre comillas algo similar a los array o vectores
		el valor de un objeto JSON puede ser otro objecto
		www.json.org
	- XML vs JSON:
		Durante mucho tiempo XML fue la única opción que existía para compartir datos entre servidores y sistemas. XML era la solución a todos los problemas de 
		intercambio de datos.
		Uno de los mayores problemas de XML es que es muy poco legible para el usuario, ya que una estructura XML puede almacenar cualquier tipo de dato 
		incluyendo imágenes, audio, video y mucho más, formando un código demasiado extenso. Esto puede ser peligroso a nivel de seguridad ya que se podría 
		incluir código malicioso dentro de la estructura XML. Otra desventaja de los archivos XML es que son difíciles de tratar, además de que la sintaxis 
		entre marcas, algo parecido al HTML, hace que sean muy pesados cuando tienen grandes cantidades de información.
		JSON es una estructura que está limitada a almacenar datos clásicos y comunes, como números y textos, permitiendo que sea un formato ligero ideal para 
		el transporte de datos. En la actualidad es el formato estándar usado para la comunicación de datos, superando a XML.

	- Ventajas de usar JSON:
		JSON soporta dos tipos de estructuras: un set de pares llave-valor contenidos por un objeto y la otra es un array de valores.
		JSON permite definir estructuras de datos muy complejas.
		JSON es una estructura totalmente independiente, no necesita de tecnologías alternas.
		JSON es un formato muy intuitivo y fácil de comprender.
		JSON es totalmente flexible y para extenderlo solo hace falta agregar una nueva propiedad con los valores deseados.
		JSON Tiene una alta velocidad de procesamiento y un menor tamaño con respecto a XML.
		En conclusión, JSON es usado con frecuencia en ambientes web en los que fluye mucha información entre el cliente y el servidor; 
		y también donde los tiempos de respuesta son vitales para el rendimiento.
		
		JSON o JavaScript Object Notation es un derivado de objetos de JavaScript y es usado en la actualidad como un formato liviano y ligero para el manejo (transporte e intercambio) de datos. JSONpuede definirse de dos maneras: como una estructura de datos llave: valor (key: value) entre comillas, o como una lista ordenada de valores también entre comillas, algo similar a vectores, arreglos y/o matrices.
		DE JSON PODEMOS DECIR QUE:

    		Es soportado por la mayoría de lenguajes de programación, por lo que es considerada una estructura de datos global.
    		El manejo de datos es fácil, seguro y ágil.
    		En la actualidad se considera como una de las estructuras de datos más usadas.

- Leccion 2: Estructura de datos JSON
	- Sintaxis:
		var JSON = {
		"Animales" : [{
			"EjemploAnimal" : "ValorEjemplo",
			...
			}],
		"Plantas": [{
			"EjemploPlanta" : "ValorEjemplo",
			...
			}],
		"id" : 123213
		}

		Ej:
		{
			"animales": [
				{
					"Nombre" : "Leon",
					"Raza" : "Felino"
				},
				{
					"Nombre" : "Perro",
					"Raza" : "Felino"
				}
				]
		}
		
		JSON Validators - son utilizados para validar la estructura de un JSON
	
	- Composicion de estructuras JSON complejas - esta formada por arreglos anidados
		JSON puede almacenar, por ejemplo, datos como string, integer, arrays, objetos
		Una estructura de datos JSON compleja, se da cuando definimos una propiedad con un valor de tipo objeto o 
		arreglo y dentro de estos creamos más propiedades JSON con su respectivo valor
	- Busqueda y Procesamiento de JSON
		Como obtener valores y propiedades de un JSON
		Objetos {}: Para acceder a un valor de un objeto se usa miObjeto.propiedad
		Arreglos[]: Para acceder a un arreglo se realiza con miArreglo[2] o miArreglo["propiedad"]

- Leccion 3: Introduccion a la Geolocalizacion
	- Qué es y cómo funciona la geolocalización HTML5
		Entre muchas de las nuevas funcionalidades que se incluyeron en la especificacion 5 de HTML, la geolocalizacion fue, sin duda, una de las mejores.
		La geolocalizacion fue creada para obtener facilmente la ubicacion de los usuarios y ofrecer una mejor experiencia, ademas de proveer informacion 
		acerca de la zona en la que se encuentran, lo cual resulta muy util para aplicaciones que prestan servicios en esta area.
		En el caso de la Web HTML5 utiliza el navegador para acceder a la ubicacio´n a trave´s de la IP o la Red WIFI, en el caso de los mo´viles se utiliza 
		el GPS nativo del celular.
		La Geolocalizacion esta disponible a traves del objeto Navigator, el cual estudiaremos detalladamente en el siguiente tema, este objeto se encarga 
		de verificar si el navegador desde el cual se esta accediendo a la web tiene soporte para la caracteristica de geolocalizacion deHTML, de ser asi, 
		el objeto navigator crea una propiedad llamada geolocation y es alli donde encontramos informacion detallada acerca de la ubicacion del usuario.
		En el siguiente cuadro podemos ver como verificar si el navegador soporta la geolocalizacion y la forma de acceder a la informacion del usuario, 
		si no lo soporta, lanzamos una alerta indicando que no se pudo obtener la informacion.
	
	- El objeto navigator se usa para obtener informacion de geolozalizacion, version del navegador, etc
	
	- Usando geolocalizacion
		+ Google Maps: https://developers.google.com/maps/documentation/javascript/get-api-key
		get API
		Luego de obtener la API Key en Google Cloud, se debe proceder a activar Maps JavaScript API
		para acceder a la ubicacion del navegador se debe utilizar navigator que es parte del BOM (Browser Object Manipulation)
		para acceder a las coordenadas se debe realizar de la siguiente manera:
		navigator.coords.latitude
		navigator.coords.longitude

Leccion 4 - Programacion Funcional
	- Que es Almacenamiento Local
		Continuamos explorando las nuevas funcionalidades de HTML5 y sin duda otra de las mejores herramientas que se implementaron en esta versión 
		Web Storage o Almacenamiento local. Esta herramienta guarda datos del usuario o de la aplicación directamente en la maquina del usuario y 
		no en un servidor de bases de datos. Así, su funcionalidad facilita la vida de los desarrolladores a la hora de manipular datos que tienen 
		que persistir constantemente. Para hacer uso de esta caracteristica solo es necesario Javascript, por lo que es otra ventaja grande frente 
		a otros métodos de almacenamiento. Además, con esta funcionalidad podemos guardar hasta aproximadamente 5MB de datos en el disco duro del 
		usuario. Existe otra forma de guardar datos localmente que se conoce como cookies pero estas tienen graves problemas de seguridad y solo 
		soportan unos 4KB.

	- Tipos de almacenamiento Local
		Existen dos tipos de almacenamiento local, LocalStorage & SessionStorage. Ambos son objetos globales asignados a window, por lo tanto 
		también se puede acceder a ellos usando window.localStorage o window.sessionStorage. Estos objetos están en capacidad de almacenar datos 
		llave-valor (key/value) y la única diferencia que existe entre ellos es que sessionStorage almacena los datos mientras el usuario se encuentre 
		activo y no salga del navegador; una vez cerrado los datos se pierden.

		Por el contrario los datos almacenados en localStorage permanecen en el tiempo y el usuario puede cerrar el navegador sin ningun problema. 
		La única manera de eliminarlos es borrar la caché del navegador.
		Para usar datos con el almacenamiento local lo indicado es usar formatos JSON. Por tanto usaremos el objeto nativo JSON para serializar y deserializar 
		este tipo de formatos, empleando las funciones "JSON.stringify" y "JSON.parse".

	- Session Storage
	
	- Local Storage
		 
		LocalStorage y SessionStorage son dos atributos del objeto window, que se encargan de almacenar información en formato JSON, 
		directamente en la computadora de los usuarios que ingresan al sitio web.

		La diferencia entre Local y SessionStorage es que con el segundo los datos son persistentes, siempre y cuando, el usuario no 
		cierre el navegador.

		Con LocalStorage los datos persisten aunque se cierre el navegador y, la única manera en que estos datos se eliminan, es borrando la caché del navegador, 
		acción que sólo puede hacer el propio usuario.

Leccion 5 - Introduccion a los Web Workers
	- Que son los Web Workers
		Javascript crea un unico hilo de ejecucion a diferencia de Java que crea varios
		API Web Workers posibilita la ejecucion de subprocesos al mismo tiempo.
		Creacion:
		var worker = new Worker('doHtml.js') --> archivo en segundo plano
		worker.postMessage(site)
		worker.terminate();

	- Manejo de Web Workers
		Las palabras self y this hacen referencia al el mismo
		
		Los Web Workers son otra de las API´s que le dieron tanto éxito a la versión 5 de HTML, rompiendo el esquema tradicional de JavaScript de 
		correr todas sus tareas y operaciones en un único hilo de ejecución. Algo a tener en cuenta es que un worker es un proceso totalmente aislado 
		de nuestra aplicación y no se ejecuta bajo el mismo contexto, ni tenemos acceso al DOM, por lo tanto, cualquier variable o elemento que queramos 
		usar dentro del worker lo debemos pasar como un parámetro.

		NOTA: Cuando creamos un worker y lo enlazamos a nuestro archivo principal, podemos crear una comunicación entre las partes por medio de la cual 
		podemos enviar y recibir información de forma constante.
		
		